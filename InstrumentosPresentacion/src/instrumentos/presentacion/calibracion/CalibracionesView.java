/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package instrumentos.presentacion.calibracion;

import instrumentos.entidades.Medida;
import instrumentos.presentacion.Application;
import instrumentos.presentacion.calibracion.Medida.MedidaModel;
import instrumentos.presentacion.calibracion.Medida.MedidasModel;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import static java.lang.Integer.parseInt;

/**
 *
 * @author Addiel
 */
public class CalibracionesView extends JInternalFrame implements java.util.Observer  {
    public boolean flag = false;
    boolean signal1 = false;
    boolean signal2 = false;
    boolean sig1 = false;
    boolean sig2 = false;
    CalibracionesController controller;
    CalibracionesModel model;
    CalibracionModel modC;
    MedidaModel modM;
    MedidasModel modMs;
    /**
     * Creates new form CalibracionesView
     */
    public CalibracionesView() {
        initComponents();
        this.jTipoInstFld.setEditable(false);
        this.jTFldFecha.setFocusable(false);
        this.jTFldFecha.setEditable(false);
        this.jTFldMedida.setFocusable(false);
        this.jTFldMedida.setEditable(false);
        //this.jTabMedidas.isCellEditable(0, 0);
        //this. jTabMedidas.isCellEditable(0, 1);
        
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTabRegistroF = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabMedidas = new javax.swing.JTable();
        jAdd = new javax.swing.JButton();
        jDelete = new javax.swing.JButton();
        jLabInstru = new javax.swing.JLabel();
        jTipoInstFld = new javax.swing.JTextField();
        jLabCalib = new javax.swing.JLabel();
        jLabFecha = new javax.swing.JLabel();
        jLabMed = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTFldFecha = new javax.swing.JTextField();
        jTFldMedida = new javax.swing.JTextField();
        jSave = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Calibraciones");
        setMaximumSize(new java.awt.Dimension(580, 485));
        setMinimumSize(new java.awt.Dimension(580, 485));
        setPreferredSize(new java.awt.Dimension(580, 485));

        jTabRegistroF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTabRegistroF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabRegistroFMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabRegistroF);

        jTabMedidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTabMedidas);

        jAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/instrumentos/presentacion/icons/add.png"))); // NOI18N
        jAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddActionPerformed(evt);
            }
        });

        jDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/instrumentos/presentacion/icons/delete.png"))); // NOI18N
        jDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteActionPerformed(evt);
            }
        });

        jLabInstru.setText("Instrumento");

        jLabCalib.setText("Calibracion");

        jLabFecha.setText("Fecha");

        jLabMed.setText("Mediciones");

        jLabel5.setText("MEDIDAS");

        jTFldMedida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFldMedidaKeyTyped(evt);
            }
        });

        jSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/instrumentos/presentacion/icons/save.png"))); // NOI18N
        jSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabMed)
                                .addGap(18, 18, 18)
                                .addComponent(jTFldMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabCalib)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabFecha)
                                .addGap(41, 41, 41)
                                .addComponent(jTFldFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 301, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSave)
                                .addGap(16, 16, 16)))))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabInstru)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTipoInstFld, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jAdd)
                        .addGap(18, 18, 18)
                        .addComponent(jDelete)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabInstru)
                    .addComponent(jTipoInstFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jAdd)
                    .addComponent(jDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSave)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabCalib, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabFecha)
                            .addComponent(jTFldFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabMed)
                            .addComponent(jTFldMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setBounds(0, 0, 580, 480);
    }// </editor-fold>//GEN-END:initComponents

    private void jSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveActionPerformed
        int row = this.jTabRegistroF.getSelectedRow();  
        boolean flag = false;
        try {
            if(signal1){
            controller.agregarCalibracion();
            signal1=false;
             JOptionPane.showMessageDialog(this, "Calibracion Agregada", "",JOptionPane.INFORMATION_MESSAGE);
            }
            else if(signal2){
            controller.UpdateCalibracion(row);
            signal2=false;
             JOptionPane.showMessageDialog(this, "Calibracion Actualizada!", "",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            Logger.getLogger(CalibracionesView.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    }//GEN-LAST:event_jSaveActionPerformed

    private void jAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddActionPerformed
        int row = this.jTabRegistroF.getSelectedRow();  
       
        try {
            controller.preAgregar(row);
            signal1 = true;
        } catch (Exception ex) {
            Logger.getLogger(CalibracionesView.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_jAddActionPerformed

    private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed
        int row = this.jTabRegistroF.getSelectedRow(); 
        try {
            controller.eliminarCalibracion(row);
            
        } catch (Exception ex) {
            Logger.getLogger(CalibracionesView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jDeleteActionPerformed

    private void jTFldMedidaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFldMedidaKeyTyped
        try{
        if(jTFldMedida.getText().isEmpty() ){
           // JOptionPane.showMessageDialog(this, "Digite un valor valido!", "",JOptionPane.ERROR_MESSAGE);
        }else{
            int n = parseInt(jTFldMedida.getText());
            controller.preAddMedida(n);
            this.flag = true;
        }
        }catch(Exception e){};
    }//GEN-LAST:event_jTFldMedidaKeyTyped

    private void jTabRegistroFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabRegistroFMouseClicked
        int row = this.jTabRegistroF.getSelectedRow();
        
        this.jTFldFecha.setFocusable(true);
        this.jTFldFecha.setEditable(true);
        this.jTFldMedida.setFocusable(true);
        this.jTFldMedida.setEditable(true);
        try {
            controller.preAddCalibracion(row);
            controller.buscarMedidas(row);
            signal2 = true;
        } catch (Exception ex) {
            Logger.getLogger(CalibracionesView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTabRegistroFMouseClicked

    public JTable getjTabMedidas() {
        return jTabMedidas;
    }

    public JTable getjTabRegistroF() {
        return jTabRegistroF;
    }
    
    public JTextField getjTFldFecha() {
        return jTFldFecha;
    }

    public void setjTFldFecha(JTextField jTFldFecha) {
        this.jTFldFecha = jTFldFecha;
    }

    public JTextField getjTFldMedida() {
        return jTFldMedida;
    }

    public void setjTFldMedida(JTextField jTFldMedida) {
        this.jTFldMedida = jTFldMedida;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalibracionesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalibracionesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalibracionesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalibracionesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalibracionesView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jAdd;
    public javax.swing.JButton jDelete;
    private javax.swing.JLabel jLabCalib;
    private javax.swing.JLabel jLabFecha;
    private javax.swing.JLabel jLabInstru;
    private javax.swing.JLabel jLabMed;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JButton jSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextField jTFldFecha;
    public javax.swing.JTextField jTFldMedida;
    public javax.swing.JTable jTabMedidas;
    public javax.swing.JTable jTabRegistroF;
    public javax.swing.JTextField jTipoInstFld;
    // End of variables declaration//GEN-END:variables

   

    void setController(CalibracionesController controller) {
        this.controller = controller;
    }

   

    public CalibracionesModel getModel() {
        return model;
    }
    
    void setModel(CalibracionesModel model) {
        this.model = model;
        model.addObserver(this);
    }
    public boolean isCellEditable(int rowIndex, int colIndex) {
        return colIndex != 0 && colIndex != 1;
    }

    public CalibracionModel getModC() {
        return modC;
    }

    public void setModC(CalibracionModel modC) {
        this.modC = modC;
    }

    public MedidaModel getModM() {
        return modM;
    }

    public void setModM(MedidaModel modM) {
        this.modM = modM;
    }

    public MedidasModel getModMs() {
        return modMs; 
    }

    public void setModMs(MedidasModel modMs) {
        this.modMs = modMs;
        modMs.addObserver(this);
    }
    public Medida getNewMedida() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
     @Override
    public void update(Observable o, Object arg) {
        jTipoInstFld.setText(model.getFilter().getInstrumento().getDescripcion());
        if (model.getErrores().get("Jserie")!=null){
            jLabInstru.setBorder(Application.BORDER_ERROR);
            jLabInstru.setToolTipText(model.getErrores().get("Jserie"));
        }
        else{
            jLabInstru.setBorder(null);
            jLabInstru.setToolTipText("");
        }
        jTabRegistroF.setModel(model.getCalibraciones());
        jTabMedidas.setModel(model.getMedidas());
        this.revalidate();
        
       if (!model.getMensaje().equals("")){
            JOptionPane.showMessageDialog(this, model.getMensaje(), "",JOptionPane.INFORMATION_MESSAGE);
             
        }  
      
    }

  
    
    
    
};

